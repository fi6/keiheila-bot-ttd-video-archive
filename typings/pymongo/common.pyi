"""
This type stub file was generated by pyright.
"""

from bson.binary import UuidRepresentation
from bson.py3compat import PY3, abc
from pymongo.compression_support import validate_compressors, validate_zlib_compression_level
from pymongo.encryption_options import validate_auto_encryption_opts_or_none
from pymongo.monitoring import _validate_event_listeners
from pymongo.ssl_support import validate_allow_invalid_certs, validate_cert_reqs

"""Functions and classes common to multiple pymongo modules."""
if PY3:
    ...
else:
    ...
MAX_BSON_SIZE = 16 * 1024 ** 2
MAX_MESSAGE_SIZE = 2 * MAX_BSON_SIZE
MIN_WIRE_VERSION = 0
MAX_WIRE_VERSION = 0
MAX_WRITE_BATCH_SIZE = 1000
MIN_SUPPORTED_SERVER_VERSION = "2.6"
MIN_SUPPORTED_WIRE_VERSION = 2
MAX_SUPPORTED_WIRE_VERSION = 9
HEARTBEAT_FREQUENCY = 10
KILL_CURSOR_FREQUENCY = 1
EVENTS_QUEUE_FREQUENCY = 1
SERVER_SELECTION_TIMEOUT = 30
MIN_HEARTBEAT_INTERVAL = 0.5
MIN_SRV_RESCAN_INTERVAL = 60
CONNECT_TIMEOUT = 20
MAX_POOL_SIZE = 100
MIN_POOL_SIZE = 0
MAX_IDLE_TIME_MS = None
MAX_IDLE_TIME_SEC = None
WAIT_QUEUE_TIMEOUT = None
LOCAL_THRESHOLD_MS = 15
RETRY_WRITES = True
RETRY_READS = True
COMMAND_NOT_FOUND_CODES = (59, )
UNAUTHORIZED_CODES = (13, 16547, 16548)
_MAX_END_SESSIONS = 10000
def partition_node(node):
    """Split a host:port string into (host, int(port)) pair."""
    ...

def clean_node(node):
    """Split and normalize a node name from an ismaster response."""
    ...

def raise_config_error(key, dummy):
    """Raise ConfigurationError with the given key name."""
    ...

_UUID_REPRESENTATIONS = { 'unspecified': UuidRepresentation.UNSPECIFIED,'standard': UuidRepresentation.STANDARD,'pythonLegacy': UuidRepresentation.PYTHON_LEGACY,'javaLegacy': UuidRepresentation.JAVA_LEGACY,'csharpLegacy': UuidRepresentation.CSHARP_LEGACY }
def validate_boolean(option, value):
    """Validates that 'value' is True or False."""
    ...

def validate_boolean_or_string(option, value):
    """Validates that value is True, False, 'true', or 'false'."""
    ...

def validate_integer(option, value):
    """Validates that 'value' is an integer (or basestring representation).
    """
    ...

def validate_positive_integer(option, value):
    """Validate that 'value' is a positive integer, which does not include 0.
    """
    ...

def validate_non_negative_integer(option, value):
    """Validate that 'value' is a positive integer or 0.
    """
    ...

def validate_readable(option, value):
    """Validates that 'value' is file-like and readable.
    """
    ...

def validate_positive_integer_or_none(option, value):
    """Validate that 'value' is a positive integer or None.
    """
    ...

def validate_non_negative_integer_or_none(option, value):
    """Validate that 'value' is a positive integer or 0 or None.
    """
    ...

def validate_string(option, value):
    """Validates that 'value' is an instance of `basestring` for Python 2
    or `str` for Python 3.
    """
    ...

def validate_string_or_none(option, value):
    """Validates that 'value' is an instance of `basestring` or `None`.
    """
    ...

def validate_int_or_basestring(option, value):
    """Validates that 'value' is an integer or string.
    """
    ...

def validate_non_negative_int_or_basestring(option, value):
    """Validates that 'value' is an integer or string.
    """
    ...

def validate_positive_float(option, value):
    """Validates that 'value' is a float, or can be converted to one, and is
       positive.
    """
    ...

def validate_positive_float_or_zero(option, value):
    """Validates that 'value' is 0 or a positive float, or can be converted to
    0 or a positive float.
    """
    ...

def validate_timeout_or_none(option, value):
    """Validates a timeout specified in milliseconds returning
    a value in floating point seconds.
    """
    ...

def validate_timeout_or_zero(option, value):
    """Validates a timeout specified in milliseconds returning
    a value in floating point seconds for the case where None is an error
    and 0 is valid. Setting the timeout to nothing in the URI string is a
    config error.
    """
    ...

def validate_timeout_or_none_or_zero(option, value):
    """Validates a timeout specified in milliseconds returning
    a value in floating point seconds. value=0 and value="0" are treated the
    same as value=None which means unlimited timeout.
    """
    ...

def validate_max_staleness(option, value):
    """Validates maxStalenessSeconds according to the Max Staleness Spec."""
    ...

def validate_read_preference(dummy, value):
    """Validate a read preference.
    """
    ...

def validate_read_preference_mode(dummy, value):
    """Validate read preference mode for a MongoReplicaSetClient.

    .. versionchanged:: 3.5
       Returns the original ``value`` instead of the validated read preference
       mode.
    """
    ...

def validate_auth_mechanism(option, value):
    """Validate the authMechanism URI option.
    """
    ...

def validate_uuid_representation(dummy, value):
    """Validate the uuid representation option selected in the URI.
    """
    ...

def validate_read_preference_tags(name, value):
    """Parse readPreferenceTags if passed as a client kwarg.
    """
    ...

_MECHANISM_PROPS = frozenset(['SERVICE_NAME', 'CANONICALIZE_HOST_NAME', 'SERVICE_REALM', 'AWS_SESSION_TOKEN'])
def validate_auth_mechanism_properties(option, value):
    """Validate authMechanismProperties."""
    ...

def validate_document_class(option, value):
    """Validate the document_class option."""
    ...

def validate_type_registry(option, value):
    """Validate the type_registry option."""
    ...

def validate_list(option, value):
    """Validates that 'value' is a list."""
    ...

def validate_list_or_none(option, value):
    """Validates that 'value' is a list or None."""
    ...

def validate_list_or_mapping(option, value):
    """Validates that 'value' is a list or a document."""
    ...

def validate_is_mapping(option, value):
    """Validate the type of method arguments that expect a document."""
    ...

def validate_is_document_type(option, value):
    """Validate the type of method arguments that expect a MongoDB document."""
    ...

def validate_appname_or_none(option, value):
    """Validate the appname option."""
    ...

def validate_driver_or_none(option, value):
    """Validate the driver keyword arg."""
    ...

def validate_is_callable_or_none(option, value):
    """Validates that 'value' is a callable."""
    ...

def validate_ok_for_replace(replacement):
    """Validate a replacement document."""
    ...

def validate_ok_for_update(update):
    """Validate an update document."""
    ...

_UNICODE_DECODE_ERROR_HANDLERS = frozenset(['strict', 'replace', 'ignore'])
def validate_unicode_decode_error_handler(dummy, value):
    """Validate the Unicode decode error handler option of CodecOptions.
    """
    ...

def validate_tzinfo(dummy, value):
    """Validate the tzinfo option
    """
    ...

URI_OPTIONS_ALIAS_MAP = { 'journal': ['j'],'wtimeoutms': ['wtimeout'],'tls': ['ssl'],'tlsallowinvalidcertificates': ['ssl_cert_reqs'],'tlsallowinvalidhostnames': ['ssl_match_hostname'],'tlscrlfile': ['ssl_crlfile'],'tlscafile': ['ssl_ca_certs'],'tlscertificatekeyfile': ['ssl_certfile'],'tlscertificatekeyfilepassword': ['ssl_pem_passphrase'] }
URI_OPTIONS_VALIDATOR_MAP = { 'appname': validate_appname_or_none,'authmechanism': validate_auth_mechanism,'authmechanismproperties': validate_auth_mechanism_properties,'authsource': validate_string,'compressors': validate_compressors,'connecttimeoutms': validate_timeout_or_none_or_zero,'directconnection': validate_boolean_or_string,'heartbeatfrequencyms': validate_timeout_or_none,'journal': validate_boolean_or_string,'localthresholdms': validate_positive_float_or_zero,'maxidletimems': validate_timeout_or_none,'maxpoolsize': validate_positive_integer_or_none,'maxstalenessseconds': validate_max_staleness,'readconcernlevel': validate_string_or_none,'readpreference': validate_read_preference_mode,'readpreferencetags': validate_read_preference_tags,'replicaset': validate_string_or_none,'retryreads': validate_boolean_or_string,'retrywrites': validate_boolean_or_string,'serverselectiontimeoutms': validate_timeout_or_zero,'sockettimeoutms': validate_timeout_or_none_or_zero,'ssl_keyfile': validate_readable,'tls': validate_boolean_or_string,'tlsallowinvalidcertificates': validate_allow_invalid_certs,'ssl_cert_reqs': validate_cert_reqs,'tlsallowinvalidhostnames': lambda *x: not validate_boolean_or_string(*x),'ssl_match_hostname': validate_boolean_or_string,'tlscafile': validate_readable,'tlscertificatekeyfile': validate_readable,'tlscertificatekeyfilepassword': validate_string_or_none,'tlsdisableocspendpointcheck': validate_boolean_or_string,'tlsinsecure': validate_boolean_or_string,'w': validate_non_negative_int_or_basestring,'wtimeoutms': validate_non_negative_integer,'zlibcompressionlevel': validate_zlib_compression_level }
NONSPEC_OPTIONS_VALIDATOR_MAP = { 'connect': validate_boolean_or_string,'driver': validate_driver_or_none,'fsync': validate_boolean_or_string,'minpoolsize': validate_non_negative_integer,'socketkeepalive': validate_boolean_or_string,'tlscrlfile': validate_readable,'tz_aware': validate_boolean_or_string,'unicode_decode_error_handler': validate_unicode_decode_error_handler,'uuidrepresentation': validate_uuid_representation,'waitqueuemultiple': validate_non_negative_integer_or_none,'waitqueuetimeoutms': validate_timeout_or_none }
KW_VALIDATORS = { 'document_class': validate_document_class,'type_registry': validate_type_registry,'read_preference': validate_read_preference,'event_listeners': _validate_event_listeners,'tzinfo': validate_tzinfo,'username': validate_string_or_none,'password': validate_string_or_none,'server_selector': validate_is_callable_or_none,'auto_encryption_opts': validate_auto_encryption_opts_or_none }
INTERNAL_URI_OPTION_NAME_MAP = { 'j': 'journal','wtimeout': 'wtimeoutms','tls': 'ssl','tlsallowinvalidcertificates': 'ssl_cert_reqs','tlsallowinvalidhostnames': 'ssl_match_hostname','tlscrlfile': 'ssl_crlfile','tlscafile': 'ssl_ca_certs','tlscertificatekeyfile': 'ssl_certfile','tlscertificatekeyfilepassword': 'ssl_pem_passphrase','tlsdisableocspendpointcheck': 'ssl_check_ocsp_endpoint' }
URI_OPTIONS_DEPRECATION_MAP = { 'j': ('renamed', 'journal'),'wtimeout': ('renamed', 'wTimeoutMS'),'ssl_cert_reqs': ('renamed', 'tlsAllowInvalidCertificates'),'ssl_match_hostname': ('renamed', 'tlsAllowInvalidHostnames'),'ssl_crlfile': ('renamed', 'tlsCRLFile'),'ssl_ca_certs': ('renamed', 'tlsCAFile'),'ssl_pem_passphrase': ('renamed', 'tlsCertificateKeyFilePassword'),'waitqueuemultiple': ('removed', 'Instead of using waitQueueMultiple to bound queuing, limit the size ' 'of the thread pool in your application server') }
VALIDATORS = URI_OPTIONS_VALIDATOR_MAP.copy()
TIMEOUT_OPTIONS = ['connecttimeoutms', 'heartbeatfrequencyms', 'maxidletimems', 'maxstalenessseconds', 'serverselectiontimeoutms', 'sockettimeoutms', 'waitqueuetimeoutms']
_AUTH_OPTIONS = frozenset(['authmechanismproperties'])
def validate_auth_option(option, value):
    """Validate optional authentication parameters.
    """
    ...

def validate(option, value):
    """Generic validation function.
    """
    ...

def get_validated_options(options, warn=...):
    """Validate each entry in options and raise a warning if it is not valid.
    Returns a copy of options with invalid entries removed.

    :Parameters:
        - `opts`: A dict containing MongoDB URI options.
        - `warn` (optional): If ``True`` then warnings will be logged and
          invalid options will be ignored. Otherwise, invalid options will
          cause errors.
    """
    ...

WRITE_CONCERN_OPTIONS = frozenset(['w', 'wtimeout', 'wtimeoutms', 'fsync', 'j', 'journal'])
class BaseObject(object):
    """A base class that provides attributes and methods common
    to multiple pymongo classes.

    SHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.
    """
    def __init__(self, codec_options, read_preference, write_concern, read_concern) -> None:
        ...
    
    @property
    def codec_options(self):
        """Read only access to the :class:`~bson.codec_options.CodecOptions`
        of this instance.
        """
        ...
    
    @property
    def write_concern(self):
        """Read only access to the :class:`~pymongo.write_concern.WriteConcern`
        of this instance.

        .. versionchanged:: 3.0
          The :attr:`write_concern` attribute is now read only.
        """
        ...
    
    @property
    def read_preference(self):
        """Read only access to the read preference of this instance.

        .. versionchanged:: 3.0
          The :attr:`read_preference` attribute is now read only.
        """
        ...
    
    @property
    def read_concern(self):
        """Read only access to the :class:`~pymongo.read_concern.ReadConcern`
        of this instance.

        .. versionadded:: 3.2
        """
        ...
    


class _CaseInsensitiveDictionary(abc.MutableMapping):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __contains__(self, key):
        ...
    
    def __len__(self):
        ...
    
    def __iter__(self):
        ...
    
    def __repr__(self):
        ...
    
    def __setitem__(self, key, value):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __delitem__(self, key):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def get(self, key, default=...):
        ...
    
    def pop(self, key, *args, **kwargs):
        ...
    
    def popitem(self):
        ...
    
    def clear(self):
        ...
    
    def setdefault(self, key, default=...):
        ...
    
    def update(self, other):
        ...
    
    def cased_key(self, key):
        ...
    


