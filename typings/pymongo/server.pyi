"""
This type stub file was generated by pyright.
"""

"""Communicate with one MongoDB server in a topology."""
_CURSOR_DOC_FIELDS = { 'cursor': { 'firstBatch': 1,'nextBatch': 1 } }
class Server(object):
    def __init__(self, server_description, pool, monitor, topology_id=..., listeners=..., events=...) -> None:
        """Represent one MongoDB server."""
        ...
    
    def open(self):
        """Start monitoring, or restart after a fork.

        Multiple calls have no effect.
        """
        ...
    
    def reset(self):
        """Clear the connection pool."""
        ...
    
    def close(self):
        """Clear the connection pool and stop the monitor.

        Reconnect with open().
        """
        ...
    
    def request_check(self):
        """Check the server's state soon."""
        ...
    
    def run_operation_with_response(self, sock_info, operation, set_slave_okay, listeners, exhaust, unpack_res):
        """Run a _Query or _GetMore operation and return a Response object.

        This method is used only to run _Query/_GetMore operations from
        cursors.
        Can raise ConnectionFailure, OperationFailure, etc.

        :Parameters:
          - `operation`: A _Query or _GetMore object.
          - `set_slave_okay`: Pass to operation.get_message.
          - `all_credentials`: dict, maps auth source to MongoCredential.
          - `listeners`: Instance of _EventListeners or None.
          - `exhaust`: If True, then this is an exhaust cursor operation.
          - `unpack_res`: A callable that decodes the wire protocol response.
        """
        ...
    
    def get_socket(self, all_credentials, checkout=...):
        ...
    
    @property
    def description(self):
        ...
    
    @description.setter
    def description(self, server_description):
        ...
    
    @property
    def pool(self):
        ...
    
    def __repr__(self):
        ...
    


