"""
This type stub file was generated by pyright.
"""

"""Class to monitor a MongoDB server on a background thread."""
class MonitorBase(object):
    def __init__(self, topology, name, interval, min_interval) -> None:
        """Base class to do periodic work on a background thread.

        The the background thread is signaled to stop when the Topology or
        this instance is freed.
        """
        ...
    
    def open(self):
        """Start monitoring, or restart after a fork.

        Multiple calls have no effect.
        """
        ...
    
    def gc_safe_close(self):
        """GC safe close."""
        ...
    
    def close(self):
        """Close and stop monitoring.

        open() restarts the monitor after closing.
        """
        ...
    
    def join(self, timeout=...):
        """Wait for the monitor to stop."""
        ...
    
    def request_check(self):
        """If the monitor is sleeping, wake it soon."""
        ...
    


class Monitor(MonitorBase):
    def __init__(self, server_description, topology, pool, topology_settings) -> None:
        """Class to monitor a MongoDB server on a background thread.

        Pass an initial ServerDescription, a Topology, a Pool, and
        TopologySettings.

        The Topology is weakly referenced. The Pool must be exclusive to this
        Monitor.
        """
        ...
    
    def cancel_check(self):
        """Cancel any concurrent isMaster check.

        Note: this is called from a weakref.proxy callback and MUST NOT take
        any locks.
        """
        ...
    
    def gc_safe_close(self):
        ...
    
    def close(self):
        ...
    


class SrvMonitor(MonitorBase):
    def __init__(self, topology, topology_settings) -> None:
        """Class to poll SRV records on a background thread.

        Pass a Topology and a TopologySettings.

        The Topology is weakly referenced.
        """
        ...
    


class _RttMonitor(MonitorBase):
    def __init__(self, topology, topology_settings, pool) -> None:
        """Maintain round trip times for a server.

        The Topology is weakly referenced.
        """
        ...
    
    def close(self):
        ...
    
    def add_sample(self, sample):
        """Add a RTT sample."""
        ...
    
    def average(self):
        """Get the calculated average, or None if no samples yet."""
        ...
    
    def reset(self):
        """Reset the average RTT."""
        ...
    


_MONITORS = set()
