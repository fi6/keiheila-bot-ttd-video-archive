"""
This type stub file was generated by pyright.
"""

"""Criteria to select some ServerDescriptions from a TopologyDescription."""
class Selection(object):
    """Input or output of a server selector function."""
    @classmethod
    def from_topology_description(cls, topology_description):
        ...
    
    def __init__(self, topology_description, server_descriptions, common_wire_version, primary) -> None:
        ...
    
    def with_server_descriptions(self, server_descriptions):
        ...
    
    def secondary_with_max_last_write_date(self):
        ...
    
    @property
    def primary_selection(self):
        ...
    
    @property
    def heartbeat_frequency(self):
        ...
    
    @property
    def topology_type(self):
        ...
    
    def __bool__(self):
        ...
    
    __nonzero__ = ...
    def __getitem__(self, item):
        ...
    


def any_server_selector(selection):
    ...

def readable_server_selector(selection):
    ...

def writable_server_selector(selection):
    ...

def secondary_server_selector(selection):
    ...

def arbiter_server_selector(selection):
    ...

def writable_preferred_server_selector(selection):
    """Like PrimaryPreferred but doesn't use tags or latency."""
    ...

def apply_single_tag_set(tag_set, selection):
    """All servers matching one tag set.

    A tag set is a dict. A server matches if its tags are a superset:
    A server tagged {'a': '1', 'b': '2'} matches the tag set {'a': '1'}.

    The empty tag set {} matches any server.
    """
    ...

def apply_tag_sets(tag_sets, selection):
    """All servers match a list of tag sets.

    tag_sets is a list of dicts. The empty tag set {} matches any server,
    and may be provided at the end of the list as a fallback. So
    [{'a': 'value'}, {}] expresses a preference for servers tagged
    {'a': 'value'}, but accepts any server if none matches the first
    preference.
    """
    ...

def secondary_with_tags_server_selector(tag_sets, selection):
    """All near-enough secondaries matching the tag sets."""
    ...

def member_with_tags_server_selector(tag_sets, selection):
    """All near-enough members matching the tag sets."""
    ...

