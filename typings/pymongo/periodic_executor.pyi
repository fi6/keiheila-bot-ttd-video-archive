"""
This type stub file was generated by pyright.
"""

"""Run a target function on a background thread."""
class PeriodicExecutor(object):
    def __init__(self, interval, min_interval, target, name=...) -> None:
        """"Run a target function periodically on a background thread.

        If the target's return value is false, the executor stops.

        :Parameters:
          - `interval`: Seconds between calls to `target`.
          - `min_interval`: Minimum seconds between calls if `wake` is
            called very often.
          - `target`: A function.
          - `name`: A name to give the underlying thread.
        """
        ...
    
    def __repr__(self):
        ...
    
    def open(self):
        """Start. Multiple calls have no effect.

        Not safe to call from multiple threads at once.
        """
        ...
    
    def close(self, dummy=...):
        """Stop. To restart, call open().

        The dummy parameter allows an executor's close method to be a weakref
        callback; see monitor.py.
        """
        ...
    
    def join(self, timeout=...):
        ...
    
    def wake(self):
        """Execute the target function soon."""
        ...
    
    def update_interval(self, new_interval):
        ...
    
    def skip_sleep(self):
        ...
    


_EXECUTORS = set()
