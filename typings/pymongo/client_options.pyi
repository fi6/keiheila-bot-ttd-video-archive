"""
This type stub file was generated by pyright.
"""

"""Tools to parse mongo client options."""
class ClientOptions(object):
    """ClientOptions"""
    def __init__(self, username, password, database, options) -> None:
        ...
    
    @property
    def connect(self):
        """Whether to begin discovering a MongoDB topology automatically."""
        ...
    
    @property
    def codec_options(self):
        """A :class:`~bson.codec_options.CodecOptions` instance."""
        ...
    
    @property
    def credentials(self):
        """A :class:`~pymongo.auth.MongoCredentials` instance or None."""
        ...
    
    @property
    def direct_connection(self):
        """Whether to connect to the deployment in 'Single' topology."""
        ...
    
    @property
    def local_threshold_ms(self):
        """The local threshold for this instance."""
        ...
    
    @property
    def server_selection_timeout(self):
        """The server selection timeout for this instance in seconds."""
        ...
    
    @property
    def server_selector(self):
        ...
    
    @property
    def heartbeat_frequency(self):
        """The monitoring frequency in seconds."""
        ...
    
    @property
    def pool_options(self):
        """A :class:`~pymongo.pool.PoolOptions` instance."""
        ...
    
    @property
    def read_preference(self):
        """A read preference instance."""
        ...
    
    @property
    def replica_set_name(self):
        """Replica set name or None."""
        ...
    
    @property
    def write_concern(self):
        """A :class:`~pymongo.write_concern.WriteConcern` instance."""
        ...
    
    @property
    def read_concern(self):
        """A :class:`~pymongo.read_concern.ReadConcern` instance."""
        ...
    
    @property
    def retry_writes(self):
        """If this instance should retry supported write operations."""
        ...
    
    @property
    def retry_reads(self):
        """If this instance should retry supported read operations."""
        ...
    
    @property
    def auto_encryption_opts(self):
        """A :class:`~pymongo.encryption.AutoEncryptionOpts` or None."""
        ...
    


