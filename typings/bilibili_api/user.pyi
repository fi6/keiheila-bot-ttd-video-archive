"""
This type stub file was generated by pyright.
"""

from . import utils

r"""
模块：user
功能：获取用户各种信息以及操作用户
项目GitHub地址：https://github.com/Passkou/bilibili_api
项目主页：https://passkou.com/bilibili_api
  _____                _____    _____   _  __   ____    _    _
 |  __ \      /\      / ____|  / ____| | |/ /  / __ \  | |  | |
 | |__) |    /  \    | (___   | (___   | ' /  | |  | | | |  | |
 |  ___/    / /\ \    \___ \   \___ \  |  <   | |  | | | |  | |
 | |       / ____ \   ____) |  ____) | | . \  | |__| | | |__| |
 |_|      /_/    \_\ |_____/  |_____/  |_|\_\  \____/   \____/
"""
API = utils.get_api()
def get_user_info(uid: int, verify: utils.Verify = ...):
    """
    获取用户信息（昵称，性别，生日，签名，头像URL，空间横幅URL等）
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_self_info(verify: utils.Verify = ...):
    ...

def get_relation_info(uid: int, verify: utils.Verify = ...):
    """
    获取用户关系信息（关注数，粉丝数，悄悄关注，黑名单数）
    B站API太乱了。。。
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_up_info(uid: int, verify: utils.Verify = ...):
    """
    获取UP主数据信息（视频总播放量，文章总阅读量，总点赞数）
    B站API太乱了。。。
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_live_info(uid: int, verify: utils.Verify = ...):
    """
    获取用户直播间信息
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_videos_g(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    自动循环获取用户投稿视频信息
    :param uid:
    :param order: 排序，接受"pubdate", "view", "favorite"
    :param verify:
    :return:
    """
    ...

def get_videos_raw(uid: int, ps: int = ..., tid: int = ..., pn: int = ..., keyword: str = ..., order: str = ..., verify: utils.Verify = ...):
    """
    低层级API，获取视频信息API的原始返回
    :param uid:
    :param ps: 每页最多几个视频，保持默认30即可
    :param tid: 分区ID
    :param pn: 第几页，从1开始
    :param keyword: 搜索关键词
    :param order: 排序，接受"pubdate", "view", "favorite"
    :param verify:
    :return:
    """
    ...

def get_audios_g(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    获取用户音频投稿
    :param uid:
    :param order: 排序，接受"pubdate", "view", "favorite"
    :param verify:
    :return:
    """
    ...

def get_audios_raw(uid: int, order: str = ..., ps: int = ..., pn: int = ..., verify: utils.Verify = ...):
    """
    低层级API，获取用户音频投稿API原始返回
    :param uid:
    :param order:
    :param ps:
    :param pn:
    :param verify:
    :return:
    """
    ...

def get_articles_g(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    自动循环获取专栏投稿
    :param uid:
    :param order: 排序方式，pubdate（上传日期）、view（播放量）、favorite（收藏量）
    :param verify:
    :return:
    """
    ...

def get_articles_raw(uid: int, pn: int = ..., ps: int = ..., order: str = ..., verify: utils.Verify = ...):
    """
    低层级API，获取专栏投稿API原始返回
    :param ps: 一页多少，保持30默认即可
    :param pn: 页码
    :param uid:
    :param order: 排序方式，pubdate（上传日期）、view（播放量）、favorite（收藏量）
    :param verify:
    :return:
    """
    ...

def get_article_list(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    获取专栏文集
    :param uid:
    :param order: 排序方式，接受 "latest"（最近更新），"view"（最多阅读）
    :param verify:
    :return:
    """
    ...

def get_dynamic_raw(uid: int, offset: str = ..., need_top: bool = ..., verify: utils.Verify = ...):
    ...

def get_dynamic_g(uid: int, verify: utils.Verify = ...):
    """
    自动循环获取用户动态
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_bangumi_g(uid: int, type_: str = ..., verify: utils.Verify = ...):
    """
    自动循环获取追番/追剧列表
    :param uid:
    :param type_:
    :param verify:
    :return:
    """
    ...

def get_bangumi_raw(uid: int, pn: int = ..., ps: int = ..., type_: str = ..., verify: utils.Verify = ...):
    """
    低层级API，获取追番/追剧列表原始API返回
    :param uid:
    :param pn: 页码
    :param ps: 每页多少，保持默认15
    :param type_: 类型：bangumi（番剧），drama（追剧）
    :param verify:
    :return:
    """
    ...

def get_favorite_list_content_raw(media_id: int, pn: int = ..., ps: int = ..., keyword: str = ..., order: str = ..., type_: int = ..., tid: int = ..., verify: utils.Verify = ...):
    """
    获取收藏夹内容
    :param media_id: 收藏夹id
    :param pn:
    :param ps:
    :param keyword: 搜索关键词
    :param order: 排序依据。mtime最近收藏，view最多播放，pubtime最新投稿
    :param type_:
    :param tid: 分区ID，0为全部
    :param verify:
    :return:
    """
    ...

def get_favorite_list_content_g(media_id: int, order: str = ..., verify: utils.Verify = ...):
    """
    自动循环获取收藏夹内容
    :param media_id: 收藏夹分类ID
    :param order: 排序方式，接受值：mtime（最近收藏）、view（最多播放）、pubtime（最近投稿）
    :param verify:
    :return:
    """
    ...

def get_favorite_list(uid: int, verify: utils.Verify = ...):
    """
    获取收藏夹列表
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_followings_raw(uid: int, ps: int = ..., pn: int = ..., order: str = ..., verify: utils.Verify = ...):
    """
    低层级API,获取用户关注列表（不是自己只能访问前5页）
    :param order: desc倒序,asc正序
    :param pn: 页码
    :param ps: 每页数量
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_followings_g(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    获取用户关注列表
    :param uid:
    :param order: desc倒序,asc正序
    :param verify:
    :return:
    """
    ...

def get_followers_raw(uid: int, ps: int = ..., pn: int = ..., order: str = ..., verify: utils.Verify = ...):
    """
    低层级API,获取用户粉丝列表（不是自己只能访问前5页，是自己也不能获取全部的样子）
    :param order: desc倒序,asc正序
    :param pn: 页码
    :param ps: 每页数量
    :param uid:
    :param verify:
    :return:
    """
    ...

def get_followers_g(uid: int, order: str = ..., verify: utils.Verify = ...):
    """
    获取用户粉丝列表（不是自己只能访问前5页，是自己也不能获取全部的样子）
    :param uid:
    :param order: desc倒序,asc正序
    :param verify:
    :return:
    """
    ...

def get_overview(uid: int, verify: utils.Verify = ...):
    """
    获取用户的简易订阅和投稿信息
    :param uid:
    :param verify:
    :return:
    """
    ...

def set_subscribe(uid: int, status: bool = ..., whisper: bool = ..., verify: utils.Verify = ...):
    """
    设置用户关注状态
    :param whisper: 设置关注时是否为悄悄关注
    :param uid:
    :param status: 状态，True or False
    :param verify:
    :return:
    """
    ...

def set_black(uid: int, status: bool = ..., verify: utils.Verify = ...):
    """
    设置用户拉黑状态
    :param uid:
    :param status: 状态，True or False
    :param verify:
    :return:
    """
    ...

def remove_fans(uid: int, verify: utils.Verify = ...):
    """
    移除粉丝
    :param uid:
    :param verify:
    :return:
    """
    ...

def send_msg(uid: int, text: str, self_uid: int = ..., verify: utils.Verify = ...):
    """
    给用户发送私聊信息
    :param uid:
    :param text: 内容
    :param self_uid: 自己的UID，若不提供将自动获取
    :param verify:
    :return:
    """
    ...

def get_self_subscribe_group(verify: utils.Verify):
    """
    获取自己的关注分组列表
    :param verify:
    :return:
    """
    ...

def get_user_in_which_subscribe_groups(uid: int, verify: utils.Verify):
    """
    获取用户在哪些关注分组列表
    :param uid:
    :param verify:
    :return:
    """
    ...

def add_subscribe_group(name: str, verify: utils.Verify):
    """
    添加关注分组
    :param name: 分组名
    :param verify:
    :return:
    """
    ...

def del_subscribe_group(group_id: int, verify: utils.Verify):
    """
    删除关注分组
    :param group_id: 分组ID
    :param verify:
    :return:
    """
    ...

def rename_subscribe_group(group_id: int, new_name: str, verify: utils.Verify):
    """
    重命名关注分组
    :param new_name: 新的分组名
    :param group_id: 分组ID
    :param verify:
    :return:
    """
    ...

def move_user_subscribe_group(uid: int, group_ids: list, verify: utils.Verify):
    """
    移动用户到特定的关注分组
    :param uid:
    :param group_ids: 分组id列表，为空时移动到默认分组
    :param verify:
    :return:
    """
    ...

